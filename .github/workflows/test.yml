name: "Tests"
on:
  pull_request:
  push:
    branches:
      - '*'
permissions:
  contents: read
jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        persist-credentials: false
    - name: Setup Python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: '3.13'
    - name: Cache pip downloads
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-lint-${{ runner.os }}-${{ runner.arch }}-${{ steps.setup-python.outputs.python-version }}-${{ github.run_id }}
        restore-keys: pip-lint-${{ runner.os }}-${{ runner.arch }}-${{ steps.setup-python.outputs.python-version }}-
    - name: Run linters
      run: pipx run --python "$WORKFLOW_PYTHON" tox run -e lint,checkver
      env:
        WORKFLOW_PYTHON: '${{ steps.setup-python.outputs.python-path }}'
    - name: Check types
      run: CXXFLAGS="$CFLAGS" pipx run --python "$WORKFLOW_PYTHON" tox run -e type
      env:
        WORKFLOW_PYTHON: '${{ steps.setup-python.outputs.python-path }}'
        CPPFLAGS: '-DNDEBUG -U_FORTIFY_SOURCE'
        CFLAGS: '-O0 -g0 -fvisibility=hidden -fvisibility-inlines-hidden'
    - name: Clean up
      run: python -m pip cache remove adrt || true
  test:
    name: 'test (${{ matrix.python }})'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        python: ['3.10', '3.11', '3.12', '3.13', '3.13t']
        include:
          - use_asan: 'true'
            use_ubsan: 'true'
            use_openmp: 'false'
            constraints: 'numpy>=2'
          - python: '3.13t'
            use_asan: 'false'
            use_ubsan: 'false'
            use_openmp: 'true'
          - python: '3.11'
            constraints: 'numpy<2'
          - python: '3.10'
            use_asan: 'false'
            use_ubsan: 'false'
            use_openmp: 'true'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        persist-credentials: false
    - name: Setup Python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: ${{ matrix.python }}
    - name: Cache pip downloads
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-test-${{ runner.os }}-${{ runner.arch }}-${{ steps.setup-python.outputs.python-version }}-${{ github.run_id }}
        restore-keys: pip-test-${{ runner.os }}-${{ runner.arch }}-${{ steps.setup-python.outputs.python-version }}-
    - name: Build package
      run: |
        # Base compilation flags
        ADRT_CFLAGS='-O3 -fno-omit-frame-pointer -g -flto -fvisibility=hidden -fvisibility-inlines-hidden -fcf-protection=full -fstack-protector-strong -fstack-clash-protection -fno-math-errno -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wsign-compare -Wfloat-conversion -Warith-conversion -Wdouble-promotion -Wfloat-equal -Wimplicit-fallthrough -Warray-bounds=2 -Wvla -Wunused -Wduplicated-branches -Wduplicated-cond -Wnull-dereference -Wstack-protector -Wtrampolines -Walloca -Wshift-overflow=2 -Wswitch-default -Wshadow -Wundef -Wcast-align=strict -Wstringop-overflow=3 -Wformat=2 -Wformat-overflow=2 -Wformat-truncation=2 -Wformat-signedness -Wlogical-op'
        ADRT_CPPFLAGS='-UNDEBUG -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC'
        # Add any sanitizer flags
        if [[ "$ADRT_USE_ASAN" == 'true' ]]; then
          ADRT_CFLAGS="$ADRT_CFLAGS -fsanitize=address -fsanitize=pointer-compare -fsanitize=pointer-subtract"
        fi
        if [[ "$ADRT_USE_UBSAN" == 'true' ]]; then
          ADRT_CFLAGS="$ADRT_CFLAGS -fsanitize=undefined -fsanitize=bounds-strict -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow"
        fi
        if [[ "$ADRT_USE_ASAN" == 'true' || "$ADRT_USE_UBSAN" == 'true' ]]; then
          ADRT_CFLAGS="$ADRT_CFLAGS -fno-sanitize-recover=all"
          # If using any sanitizers, disable fortification
          ADRT_CPPFLAGS="$ADRT_CPPFLAGS -U_FORTIFY_SOURCE"
        fi
        # Add OpenMP flag if needed
        if [[ "$ADRT_USE_OPENMP" == 'true' ]]; then
          ADRT_CFLAGS="$ADRT_CFLAGS -fopenmp"
        fi
        # Python 3.13t disables limited API and produces a GCC warning in the headers
        if [[ "$ADRT_PYTHON" != *t ]]; then
          ADRT_CFLAGS="$ADRT_CFLAGS -Werror"
        fi
        CPPFLAGS="$ADRT_CPPFLAGS" CFLAGS="$ADRT_CFLAGS" CXXFLAGS="$ADRT_CFLAGS" pipx run --python "$WORKFLOW_PYTHON" build --wheel
      env:
        WORKFLOW_PYTHON: '${{ steps.setup-python.outputs.python-path }}'
        ADRT_PYTHON: '${{ matrix.python }}'
        ADRT_USE_ASAN: '${{ matrix.use_asan }}'
        ADRT_USE_UBSAN: '${{ matrix.use_ubsan }}'
        ADRT_USE_OPENMP: '${{ matrix.use_openmp }}'
    - name: Install package
      id: install-pkg
      run: |
        CONSTRAINT_FILE="$(mktemp)"
        printf '%s\n' "$CONSTRAINTS" | tr ':' '\n' | tee "$CONSTRAINT_FILE"
        VENV_DIR="$(mktemp -d)"
        "$WORKFLOW_PYTHON" -m venv "$VENV_DIR"
        PIP_CONSTRAINT="$CONSTRAINT_FILE" "${VENV_DIR}/bin/python" -m pip install 'pip>=25.1'
        PIP_CONSTRAINT="$CONSTRAINT_FILE" "${VENV_DIR}/bin/python" -m pip install --group test
        PIP_CONSTRAINT="$CONSTRAINT_FILE" "${VENV_DIR}/bin/python" -m pip install dist/adrt-*.whl
        printf 'venv-dir=%s\n' "$VENV_DIR" >> "$GITHUB_OUTPUT"
      env:
        WORKFLOW_PYTHON: '${{ steps.setup-python.outputs.python-path }}'
        CONSTRAINTS: '${{ matrix.constraints }}'
    - name: Run tests
      run: |
        if [[ "$ADRT_USE_ASAN" == 'true' ]]; then
          export LD_PRELOAD="$(gcc -print-file-name=libasan.so)"
          export PYTHONMALLOC='malloc'
          export ASAN_OPTIONS='detect_leaks=0:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2'
        fi
        "${VENV_DIR}/bin/python" -m pytest
      env:
        VENV_DIR: '${{ steps.install-pkg.outputs.venv-dir }}'
        ADRT_USE_ASAN: '${{ matrix.use_asan }}'
    - name: Clean up
      run: python -m pip cache remove adrt || true
  test-cpp:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        persist-credentials: false
    - name: Cache Catch2
      uses: actions/cache@v4
      id: cache-catch2
      with:
        path: tests/cpp/catch2
        key: catch2-${{ hashFiles('tools/download_catch2.py') }}
    - name: Setup Python
      if: steps.cache-catch2.outputs.cache-hit != 'true'
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: '3.13'
    - name: Download Catch2
      if: steps.cache-catch2.outputs.cache-hit != 'true'
      run: pipx run --python "$WORKFLOW_PYTHON" tools/download_catch2.py tests/cpp/catch2/
      env:
        WORKFLOW_PYTHON: '${{ steps.setup-python.outputs.python-path }}'
    - name: Build tests
      run: g++ -std=c++20 -g -fsanitize=address -fsanitize=leak -fsanitize=pointer-compare -fsanitize=pointer-subtract -fsanitize=undefined -fsanitize=bounds-strict -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fno-sanitize-recover=all -fno-omit-frame-pointer -U_FORTIFY_SOURCE -UNDEBUG -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -Wall -Wextra -Wpedantic $(find src/adrt tests/cpp/ -name '*.cpp' -not -name 'adrt_cdefs_py.cpp') -I src/adrt/ -o tests/cpp/test_all
    - name: Run tests
      run: ./tests/cpp/test_all
      env:
        ASAN_OPTIONS: 'strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1'
