name: "Release"
on:
  push:
    tags:
      - 'v[0-9]*'
permissions:
  contents: read
jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Setup Python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: '3.12'
    - name: Cache pip downloads
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-releasecheck-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.run_id }}
        restore-keys: |
          pip-releasecheck-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
          pip-test-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade tox
    - name: Check version strings
      run: python -m tox run -e checkver -- --tag_ref "$GITHUB_REF" --not_dev
    - name: Check types
      run: python -m tox run -e type
      env:
        CPPFLAGS: '-U_FORTIFY_SOURCE'
        CFLAGS: '-O0 -g0 -fvisibility=hidden -fvisibility-inlines-hidden'
    - name: Run tox tests
      run: python -m tox run -e py
      env:
        CPPFLAGS: '-UNDEBUG -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC'
        CFLAGS: '-O3 -g0 -flto -fvisibility=hidden -fvisibility-inlines-hidden'
    - name: Clean up
      run: python -m pip cache remove adrt || true
  check-cpp:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Cache Catch2
      uses: actions/cache@v3
      id: cache-catch2
      with:
        path: tests/cpp/catch2
        key: catch2-${{ hashFiles('tools/download_catch2.py', 'tools/download_catch2_requirements.txt') }}
        enableCrossOsArchive: true
    - name: Setup Python
      if: steps.cache-catch2.outputs.cache-hit != 'true'
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: '3.12'
    - name: Download Catch2
      if: steps.cache-catch2.outputs.cache-hit != 'true'
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade -r tools/download_catch2_requirements.txt
        python tools/download_catch2.py tests/cpp/catch2/
    - name: Build tests (Linux)
      if: runner.os == 'Linux'
      run: g++ -std=c++17 -g0 -UNDEBUG -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -Wall -Wextra -Wpedantic $(find src/adrt tests/cpp/ -name '*.cpp' -not -name 'adrt_cdefs_py.cpp') -I src/adrt/ -o tests/cpp/test_all.exe
    - name: Build tests (Windows)
      if: runner.os == 'Windows'
      run: |
        $vsinstance=Get-VSSetupInstance | Select-VSSetupInstance -Require Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -Product * -Latest
        & $(Join-Path -Path $vsinstance.InstallationPath -ChildPath Common7\Tools\Launch-VsDevShell.ps1) -SkipAutomaticLocation
        $cppfiles=Get-ChildItem -Recurse -Path src\adrt,tests\cpp -Include *.cpp -Exclude adrt_cdefs_py.cpp
        cl /std:c++17 /EHsc /MDd /UNDEBUG /permissive- /Zc:inline,preprocessor,__cplusplus /wd5105 /I src\adrt\ $cppfiles.FullName /link /out:tests\cpp\test_all.exe
    - name: Run tests
      run: ./tests/cpp/test_all.exe
  sdist:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [check, check-cpp]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade build
    - name: Build sdist
      run: python -m build --sdist
    - name: Store artifact
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: dist/adrt-*.tar.gz
        if-no-files-found: error
  wheel:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    needs: sdist
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Download sdist
      uses: actions/download-artifact@v3
      with:
        name: sdist
        path: dist/
    - name: Checkout repository (Windows)
      uses: actions/checkout@v4
      if: runner.os == 'Windows'
      with:
        persist-credentials: false
        path: repo
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install cibuildwheel
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade 'cibuildwheel>=2.5.0'
    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse dist/adrt-*.tar.gz
      shell: bash
      env:
        CIBW_BUILD: 'cp*'
        # Linux configuration
        CIBW_ARCHS_LINUX: 'auto64'
        CIBW_ENVIRONMENT_LINUX: >-
          CPPFLAGS='-D_FORTIFY_SOURCE=2 -DNDEBUG'
          CFLAGS='-O3 -g0 -flto -fvisibility=hidden -fvisibility-inlines-hidden -fno-plt -fno-semantic-interposition -fcf-protection=full -fstack-protector-strong -fstack-clash-protection -fno-math-errno'
          LDFLAGS='-Wl,--strip-all,--as-needed,--sort-common,-O1,-z,relro,-z,now,-z,noexecstack'
        # Windows configuration
        CIBW_ARCHS_WINDOWS: 'auto64'
        CIBW_BEFORE_ALL_WINDOWS: 'pwsh ${{ github.workspace }}\repo\tools\patch_license_windows.ps1 {package}\LICENSE.txt'
        CIBW_ENVIRONMENT_WINDOWS: >-
          CL='/permissive- /Zc:inline,preprocessor,__cplusplus /DNDEBUG'
        # macOS configuration
        CIBW_ARCHS_MACOS: 'universal2'
        CIBW_ENVIRONMENT_MACOS: >-
          CPPFLAGS='-DNDEBUG'
          CFLAGS='-O3 -g0 -flto -fvisibility=hidden -fvisibility-inlines-hidden'
          LDFLAGS='-Wl,-S,-x,-dead_strip_dylibs'
    - name: Store artifact
      uses: actions/upload-artifact@v3
      with:
        name: wheel
        path: wheelhouse/adrt-*.whl
        if-no-files-found: error
    - name: Diagnostics (Linux)
      if: runner.os == 'Linux'
      run: |
        for wheelfile in wheelhouse/adrt-*.whl; do
          if [[ ! -e "$wheelfile" ]]; then
            continue
          fi
          whldir="$(mktemp -d)"
          unzip -q "$wheelfile" -d "$whldir"
          readelf --wide --symbols --dynamic "${whldir}"/adrt/*.so > "diagnostics-$(basename -s '.whl' "$wheelfile").txt"
        done
    - name: Diagnostics (Windows)
      if: runner.os == 'Windows'
      run: |
        $vsinstance=Get-VSSetupInstance | Select-VSSetupInstance -Require Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -Product * -Latest
        & $(Join-Path -Path $vsinstance.InstallationPath -ChildPath Common7\Tools\Launch-VsDevShell.ps1) -SkipAutomaticLocation
        $ProgressPreference = 'SilentlyContinue'
        Remove-Item 'wheel-diagnostic' -Recurse -ErrorAction SilentlyContinue
        $baseextract = New-Item -Path . -Name 'wheel-diagnostic' -ItemType 'directory'
        Get-ChildItem -Path 'wheelhouse' -Filter 'adrt-*.whl' | ForEach-Object {
          $wheelfile = $_
          $destdir = New-Item -Path $baseextract.FullName -Name $wheelfile.Basename -ItemType 'directory'
          Expand-Archive -Path $wheelfile.FullName -DestinationPath $destdir.FullName
          dumpbin /exports /imports $((Get-ChildItem -Path $destdir.FullName -Filter '*.pyd' -Recurse).FullName) | Out-File -FilePath "diagnostics-$($wheelfile.Basename).txt"
        }
    - name: Diagnostics (macOS)
      if: runner.os == 'macOS'
      run: |
        for wheelfile in wheelhouse/adrt-*.whl; do
          if [[ ! -e "$wheelfile" ]]; then
            continue
          fi
          whldir="$(mktemp -d)"
          unzip -q "$wheelfile" -d "$whldir"
          {
            printf 'Libraries:\n'
            otool -L -arch all "${whldir}"/adrt/*.so
            printf 'Symbols:\n'
            nm -arch all "${whldir}"/adrt/*.so
          } > "diagnostics-$(basename -s '.whl' "$wheelfile").txt"
        done
    - name: Store diagnostics
      uses: actions/upload-artifact@v3
      with:
        name: diagnostics
        path: diagnostics-*.txt
        if-no-files-found: error
  check-artifacts:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: wheel
    steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: '3.12'
    - name: Cache pip downloads
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-releasecheckartifacts-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.run_id }}
        restore-keys: |
          pip-releasecheckartifacts-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
          pip-releasecheck-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
          pip-test-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade twine abi3audit
    - name: Download sdist
      uses: actions/download-artifact@v3
      with:
        name: sdist
        path: dist/
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheel
        path: dist/
    - name: Check artifacts
      run: python -m twine check --strict dist/*
    - name: Check Python ABI
      run: python -m abi3audit dist/*.whl
  draft-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: check-artifacts
    permissions:
      contents: write
    steps:
    - name: Download sdist
      uses: actions/download-artifact@v3
      with:
        name: sdist
        path: dist/
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheel
        path: dist/
    - name: Draft release body
      run: |
        {
          printf '<details><summary>SHA256 Checksums</summary>\n\n```\n'
          sha256sum dist/adrt-*.tar.gz dist/adrt-*.whl | sed 's!dist/!!'
          printf '```\n\n</details>\n\n'
          printf '<details><summary>SHA512 Checksums</summary>\n\n```\n'
          sha512sum dist/adrt-*.tar.gz dist/adrt-*.whl | sed 's!dist/!!'
          printf '```\n\n</details>\n'
        } > release_body.md
    - name: Create release
      run: gh release create "$GITHUB_REF_NAME" --title "$GITHUB_REF_NAME" --target "$GITHUB_SHA" --draft --notes-file 'release_body.md' --repo "$GITHUB_REPOSITORY" dist/adrt-*.tar.gz dist/adrt-*.whl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Download diagnostics
      uses: actions/download-artifact@v3
      with:
        name: diagnostics
        path: diagnostics/
    - name: Prepare step summary
      run: printf '# Artifact Contents and Diagnostics\n' > "$GITHUB_STEP_SUMMARY"
    - name: Summarize checksums
      run: |
        {
          printf '## Checksums\n\n'
          printf '<details><summary>SHA256 Checksums</summary>\n\n```\n'
          sha256sum dist/adrt-*.tar.gz dist/adrt-*.whl | sed 's!dist/!!'
          printf '```\n\n</details>\n\n'
          printf '<details><summary>SHA512 Checksums</summary>\n\n```\n'
          sha512sum dist/adrt-*.tar.gz dist/adrt-*.whl | sed 's!dist/!!'
          printf '```\n\n</details>\n\n'
        } >> "$GITHUB_STEP_SUMMARY"
    - name: Summarize contents
      run: |
        printf '## Contents\n' >> "$GITHUB_STEP_SUMMARY"
        for f in dist/*.tar.gz; do
          {
            printf '<details><summary>%s</summary>\n\n```\n' "$(basename "$f")"
            tar -tzvf "$f"
            printf '```\n\n</details>\n\n'
          } >> "$GITHUB_STEP_SUMMARY"
        done
        for f in dist/*.whl; do
          {
            printf '<details><summary>%s</summary>\n\n```\n' "$(basename "$f")"
            zipinfo "$f"
            printf '```\n\n</details>\n\n'
          } >> "$GITHUB_STEP_SUMMARY"
        done
    - name: Summarize diagnostics
      run: |
        printf '## Diagnostics\n' >> "$GITHUB_STEP_SUMMARY"
        for f in diagnostics/diagnostics-*.txt; do
          fbasename="$(basename -s '.txt' "$f")"
          wheelname="${fbasename#diagnostics-}.whl"
          {
            printf '<details><summary>%s</summary>\n\n```\n' "$wheelname"
            sed 's/\r$//g; H; $be; d; :e; g; s/^[[:space:]]*//; s/[[:space:]]*$//;' "$f"
            printf '```\n\n</details>\n\n'
          } >> "$GITHUB_STEP_SUMMARY"
        done
  upload:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: draft-release
    environment: pypi
    permissions:
      id-token: write
    steps:
    - name: Download sdist
      uses: actions/download-artifact@v3
      with:
        name: sdist
        path: dist/
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: wheel
        path: dist/
    - name: Upload package
      uses: pypa/gh-action-pypi-publish@release/v1
  publish-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: upload
    permissions:
      contents: write
    steps:
    - name: Publish GitHub release
      run: gh release edit "$GITHUB_REF_NAME" --draft=false --repo "$GITHUB_REPOSITORY"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
